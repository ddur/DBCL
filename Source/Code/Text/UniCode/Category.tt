<#@ template language="C#"  hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using DD.Collections.ICodeSet;
	
namespace DD.Text.UniCode
{
    public static class Category
    {
    	
<#
        try
        {
	        string SourceName = @"Version5\DerivedGeneralCategory.txt";
	        string FileName = Host.ResolvePath (SourceName);
            var lines = File.ReadLines (FileName);
            
	        var regexOptions = RegexOptions.Compiled | RegexOptions.ExplicitCapture;
            var categoryRegex = new Regex(@"^# General_Category=(?<name>.+)", regexOptions);
			var dataRegex = new Regex(@"^(?<start>[0123456789ABCDEF]{4,6})(\.{2}(?<final>[0123456789ABCDEF]{4,6}))?", regexOptions);

            WriteLine ( " ".PadRight(8) + "#region Imported Header" );
            WriteLine ( "" );

            bool head = true;
            bool data = false;
            int countDown = 0;
            int countUp = 0;

            var categoryName = string.Empty;
            var propertyName = string.Empty;
            var unionCatName = string.Empty;

            foreach (var line in lines) {
                // footer
                if (line.StartsWith ("# Total code points")) {
                    data = false;
                    if (countUp == 0) {
                        WriteLine (" ".PadRight(24) + "CodeSetNone.Singleton;");
                    } else if (countUp == 1) {
                        WriteLine (";");
                    } else {
                        WriteLine (");");
                    }
                    countUp = 0;
                    WriteLine (" ".PadRight(16) + "}");
                    WriteLine (" ".PadRight(16) + "return (" + unionCatName + ");");
                    WriteLine (" ".PadRight(12) + "}");
                    WriteLine (" ".PadRight(8) + "}");
                    WriteLine (" ".PadRight(8) + "private static ICodeSet " + unionCatName + ";");
                    WriteLine ( "" );
                    categoryName = string.Empty;
                }

                // data
                if (data && !string.IsNullOrWhiteSpace (line)) {
                    var dataMatch = dataRegex.Match (line);
                    if (dataMatch.Success) {
                        countUp += 1;
                        if (countDown == 2) {
                            countDown -= 1;
                        } else if (countDown == 1){
                            countDown -= 1;
                            WriteLine (".Union (");
                        } else {
                            WriteLine (",");
                        }
                        var startValue = dataMatch.Groups["start"].Value; 
                        var finalValue = dataMatch.Groups["final"].Value; 
                        if (string.IsNullOrWhiteSpace (finalValue)) {
                            Write (" ".PadRight(24) + "((Code)0x" + startValue + ")");
                        } else {
                            Write (" ".PadRight(24) + "((Code)0x" + startValue + ").Range (0x" + finalValue + ")");
                        }
                    } else {
                        WriteLine ("// No data match: " + line);
                    }
                }

                // header
                if (head) {
                    if (string.IsNullOrWhiteSpace(line)) {
                        WriteLine ("");
                    } else {
                        WriteLine ("// " + line);
                    }
                }

                // group header
                if (line.StartsWith ("# General_Category")) {
                    data = true;
                    if (head) {
                        head = false;
                        WriteLine (" ".PadRight(8) + "#endregion");
                        WriteLine ("");
                        WriteLine (" ".PadRight(8) + "#region Properties");
                        WriteLine ("");
                    }
                    var categoryMatch = categoryRegex.Match (line);
                    if (categoryMatch.Success) {
                        categoryName = categoryMatch.Groups["name"].Value;
                        propertyName = categoryName.Replace ("_", "");
                        unionCatName = "_" + propertyName.Substring (0, 1).ToLower() + propertyName.Substring (1) + "_";
                        countDown = 2;
                        WriteLine (" ".PadRight(8) + "/// <summary>");
                        WriteLine (" ".PadRight(8) + "/// Unicode category " +  categoryName.Replace ('_', ' '));
                        WriteLine (" ".PadRight(8) + "/// </summary>");
                        WriteLine (" ".PadRight(8) + "public static ICodeSet " + propertyName + " {");
                        WriteLine (" ".PadRight(12) + "get {");
                        WriteLine (" ".PadRight(16) + "if (" + unionCatName + " == null) {");
                        WriteLine (" ".PadRight(20) + unionCatName + " = ");
                    } else {
                        WriteLine ("// No category match: " + line);
                    }
                }

	        }
            WriteLine (" ".PadRight(8) + "#endregion");
            WriteLine ( "" );
        }
        catch ( Exception e ) {
            Console.WriteLine ( e.Message );
        }#>
    }
}
